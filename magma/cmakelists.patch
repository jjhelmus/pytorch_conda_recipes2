--- magma-2.2.0/CMakeLists.txt	2016-11-20 20:20:02.000000000 -0500
+++ magma-2.2.0/CMakeLists.txt	2017-07-17 01:06:10.239043595 -0400
@@ -60,6 +60,7 @@
 	message( WARNING "The compiler ${CMAKE_C_COMPILER} doesn't support the -std=c99 flag. Some code may not compile.")
 endif()
 
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libstdc++ -fno-exceptions")
 
 # ----------------------------------------
 # check Fortran name mangling
@@ -79,14 +80,14 @@
 
 # ----------------------------------------
 # locate OpenMP
-find_package( OpenMP )
-if ( OPENMP_FOUND )
-	message( STATUS "Found OpenMP" )
-	message( STATUS "    OpenMP_C_FLAGS   ${OpenMP_C_FLAGS}" )
-	message( STATUS "    OpenMP_CXX_FLAGS ${OpenMP_CXX_FLAGS}" )
-	set( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
-	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
-endif()
+# find_package( OpenMP )
+# if ( OPENMP_FOUND )
+# 	message( STATUS "Found OpenMP" )
+# 	message( STATUS "    OpenMP_C_FLAGS   ${OpenMP_C_FLAGS}" )
+# 	message( STATUS "    OpenMP_CXX_FLAGS ${OpenMP_CXX_FLAGS}" )
+# 	set( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
+# 	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
+# endif()
 
 
 # ----------------------------------------
@@ -164,13 +165,20 @@
 		set( NV_SM "${NV_SM} -gencode arch=compute_50,code=sm_50" )
 		set( NV_COMP        "-gencode arch=compute_50,code=compute_50" )
 		message( STATUS "    compile for CUDA arch 5.0 (Maxwell)" )
-	endif()
+	 endif()
+
+	 if ( ${GPU_TARGET} MATCHES "All")
+	   set( MIN_ARCH 200)
+	   SET( NV_SM "-gencode arch=compute_20,code=sm_20 -gencode arch=compute_20,code=sm_21 -gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_52,code=sm_52 -gencode arch=compute_32,code=sm_32 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_53,code=sm_53 ")
+	   SET( NV_COMP "")
+	 endif()
 	
 	if ( NOT MIN_ARCH )
 		message( FATAL_ERROR "GPU_TARGET must contain one or more of Fermi, Kepler, Maxwell, or sm{20,30,35,50}." )
 	endif()
 	
-	set( CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -DHAVE_CUBLAS ${NV_SM} ${NV_COMP} ${FORTRAN_CONVENTION}" )
+	set( CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -DHAVE_CUBLAS -Xcompiler -fPIC ${NV_SM} ${NV_COMP} ${FORTRAN_CONVENTION}" )
+	MESSAGE(STATUS "CUDA_NVCC_FLAGS: ${CUDA_NVCC_FLAGS}")
 	add_definitions( "-DHAVE_CUBLAS -DMIN_CUDA_ARCH=${MIN_ARCH}" )
 	message( STATUS "Define -DHAVE_CUBLAS -DMIN_CUDA_ARCH=${MIN_ARCH}" )
 endif()
@@ -181,7 +189,7 @@
 set( LAPACK_LIBRARIES "" CACHE STRING "Libraries for LAPACK and BLAS, to manually override search" )
 if ( "${LAPACK_LIBRARIES}" STREQUAL "" )
 	message( STATUS "Searching for BLAS and LAPACK. To override, set LAPACK_LIBRARIES using ccmake." )
-	find_package( LAPACK )
+	# find_package( LAPACK )
 else()
 	message( STATUS "User set LAPACK_LIBRARIES. To change, edit LAPACK_LIBRARIES using ccmake (set to empty to enable search)." )
 	# Check existence -- but this may be okay, if the user entered, e.g., -llapack instead of /path/to/lapack.a
@@ -228,7 +236,8 @@
 # ----------------------------------------
 # common flags
 
-set( LIBS tester lapacktest magma )
+# set( LIBS tester lapacktest magma )
+set( LIBS magma)
 
 if ( WIN32 )
 	# On Windows:
@@ -336,32 +345,33 @@
 	)
 endif()
 
+set_target_properties(magma PROPERTIES POSITION_INDEPENDENT_CODE ON)
 
 # ----------------------------------------
 # compile tester library
-add_library( tester ${libtest_all} )
+# add_library( tester ${libtest_all} )
 
 
 # ----------------------------------------
 # compile lapacktest library
 # If use fortran, compile only Fortran files, not magma_[sdcz]_no_fortran.cpp
 # else,           compile only C++     files, not Fortran files
-if ( USE_FORTRAN )
-	foreach( f ${liblapacktest_all} )
-		if ( ${f} MATCHES "\\.(f|f90)$" )
-			list( APPEND liblapacktest_all_f ${f} )
-		endif()
-	endforeach()
-	add_library( lapacktest ${liblapacktest_all_f} )
-else()
-	# alternatively, use only C/C++/CUDA files, including magma_[sdcz]_no_fortran.cpp
-	foreach( f ${liblapacktest_all} )
-		if ( ${f} MATCHES "\\.(c|cu|cpp)$" )
-			list( APPEND liblapacktest_all_cpp ${f} )
-		endif()
-	endforeach()
-	add_library( lapacktest ${liblapacktest_all_cpp} )
-endif()
+# if ( USE_FORTRAN )
+# 	foreach( f ${liblapacktest_all} )
+# 		if ( ${f} MATCHES "\\.(f|f90)$" )
+# 			list( APPEND liblapacktest_all_f ${f} )
+# 		endif()
+# 	endforeach()
+# 	add_library( lapacktest ${liblapacktest_all_f} )
+# else()
+# 	# alternatively, use only C/C++/CUDA files, including magma_[sdcz]_no_fortran.cpp
+# 	foreach( f ${liblapacktest_all} )
+# 		if ( ${f} MATCHES "\\.(c|cu|cpp)$" )
+# 			list( APPEND liblapacktest_all_cpp ${f} )
+# 		endif()
+# 	endforeach()
+# 	add_library( lapacktest ${liblapacktest_all_cpp} )
+# endif()
 
 
 # ----------------------------------------
@@ -380,42 +390,42 @@
 	${CUDA_cusparse_LIBRARY}
 )
 set( LIBS_SPARSE ${LIBS} magma_sparse )
-
+set_target_properties(magma_sparse PROPERTIES POSITION_INDEPENDENT_CODE ON)
 
 # ----------------------------------------
 # compile each tester
 
 # save testers to testing/
 # save tester lib files to testing_lib/ to avoid cluttering lib/
-set( CMAKE_RUNTIME_OUTPUT_DIRECTORY testing )
-set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY testing_lib )
-set( CMAKE_LIBRARY_OUTPUT_DIRECTORY testing_lib )
+# set( CMAKE_RUNTIME_OUTPUT_DIRECTORY testing )
+# set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY testing_lib )
+# set( CMAKE_LIBRARY_OUTPUT_DIRECTORY testing_lib )
 
 # skip Fortran testers, which require an extra file from CUDA
-foreach( f ${testing_all} )
-	if ( ${f} MATCHES "\\.(c|cu|cpp)$" )
-		list( APPEND testing_all_cpp ${f} )
-	endif()
-endforeach()
-foreach( TEST ${testing_all_cpp} )
-	string( REGEX REPLACE "\\.(cpp|f90|F90)" "" EXE ${TEST} )
-	string( REGEX REPLACE "testing/" "" EXE ${EXE} )
-	#message( "${TEST} --> ${EXE}" )
-	add_executable( ${EXE} ${TEST} )
-	target_link_libraries( ${EXE} ${LIBS} )
-endforeach()
+# foreach( f ${testing_all} )
+# 	if ( ${f} MATCHES "\\.(c|cu|cpp)$" )
+# 		list( APPEND testing_all_cpp ${f} )
+# 	endif()
+# endforeach()
+# foreach( TEST ${testing_all_cpp} )
+# 	string( REGEX REPLACE "\\.(cpp|f90|F90)" "" EXE ${TEST} )
+# 	string( REGEX REPLACE "testing/" "" EXE ${EXE} )
+# 	#message( "${TEST} --> ${EXE}" )
+# 	add_executable( ${EXE} ${TEST} )
+# 	target_link_libraries( ${EXE} ${LIBS} )
+# endforeach()
 
 
 # ----------------------------------------
 # compile each sparse tester
-set( CMAKE_RUNTIME_OUTPUT_DIRECTORY sparse/testing )
-foreach( TEST ${sparse_testing_all} )
-	string( REGEX REPLACE "\\.(cpp|f90|F90)"     "" EXE ${TEST} )
-	string( REGEX REPLACE "sparse/testing/" "" EXE ${EXE} )
-	#message( "${TEST} --> ${EXE}" )
-	add_executable( ${EXE} ${TEST} )
-	target_link_libraries( ${EXE} ${LIBS_SPARSE} )
-endforeach()
+# set( CMAKE_RUNTIME_OUTPUT_DIRECTORY sparse/testing )
+# foreach( TEST ${sparse_testing_all} )
+# 	string( REGEX REPLACE "\\.(cpp|f90|F90)"     "" EXE ${TEST} )
+# 	string( REGEX REPLACE "sparse/testing/" "" EXE ${EXE} )
+# 	#message( "${TEST} --> ${EXE}" )
+# 	add_executable( ${EXE} ${TEST} )
+# 	target_link_libraries( ${EXE} ${LIBS_SPARSE} )
+# endforeach()
 
 
 # ----------------------------------------
